{"version":3,"sources":["darinka.jpg","theme.js","ListOfTasks.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","theme","createMuiTheme","grid","flexGrow","gridContent","paddingLeft","palette","primary","main","secondary","type","link","color","bigAvatar","margin","width","height","typography","useNextVariants","htmlFontSize","ListOfTasks","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onClick","nstate","state","open","objectSpread","collapseText","setState","react_default","a","createElement","styles","CssBaseline_default","Button_default","variant","Collapse_default","in","Typography_default","className","classes","Link_default","download","href","Component","withStyles","App","darinka","require","Grid_default","container","spacing","alignItems","direction","justify","item","xs","align","src_ListOfTasks","Avatar_default","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.345fe29c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/darinka.90f0bb19.jpg\";","import {createMuiTheme} from '@material-ui/core/styles';\r\nconst theme = createMuiTheme({\r\n    grid:{\r\n        flexGrow:1,\r\n    },\r\n    gridContent:{\r\n        paddingLeft:100,\r\n    },\r\n\r\n    palette: {\r\n        primary: {\r\n            main: '#fff',\r\n        },\r\n        secondary: {\r\n            main: '#311b92',\r\n        },\r\n        type:\"dark\",\r\n    },\r\n    link: {\r\n        color:'#fff',\r\n\r\n    },\r\n    bigAvatar: {\r\n        margin: 10,\r\n        width: 300,\r\n        height:\"auto\"\r\n    },\r\n    typography: { useNextVariants: true, htmlFontSize: 10 },\r\n\r\n});\r\nexport {theme};","import React, { Component } from 'react';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport Collapse from '@material-ui/core/Collapse'\nimport Button from '@material-ui/core/Button'\nimport { MuiThemeProvider, withStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport {theme} from './theme.js';\nimport './App.css';\n\nclass ListOfTasks extends Component {\n   constructor(props){\n        super(props)\n        this.state = {\n           open:true,\n           collapseText:'скрыть'\n        }\n   }\n   onClick = ()=>{var nstate;\n                  this.state.open?\n                      nstate= {...this.state, open:false, collapseText:'раскрыть список работ'}:\n                      nstate= {...this.state, open:true, collapseText:'скрыть'};\n                  this.setState(nstate)}\n  render() {\n    return (\n        <MuiThemeProvider theme={theme} >\n            <CssBaseline />\n            <Button variant=\"contained\" color=\"secondary\" onClick={this.onClick}>{this.state.collapseText}</Button>\n            <Collapse in={this.state.open}>\n                <Typography>\n                    <Typography className={this.props.classes.link} variant=\"body2\"><Link download href=\"vue-form.zip\">Скачать</Link> \"Практикум по клиентским веб-фреймворкам\"</Typography>\n                    <Typography className={this.props.classes.link} variant=\"body2\"><Link download href=\"koa.zip\">Скачать</Link> \"Практикум по серверным веб-технологиям\"</Typography>\n                    <Typography className={this.props.classes.link} variant=\"body2\"><Link download href=\"puppeter.zip\">Скачать</Link> \"Практикум по тестированию веб-приложений\"</Typography>\n                </Typography>\n            </Collapse>\n        </MuiThemeProvider>\n    );\n  }\n}\n\nexport default withStyles(theme)(ListOfTasks);\n","import React, { Component } from 'react';\r\nimport ListOfTasks from \"./ListOfTasks\";\r\nimport {theme} from './theme.js';\r\nimport { MuiThemeProvider, withStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\n\r\nclass App extends Component{\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n    render(){\r\n        const darinka = require('./darinka.jpg')\r\n        return (\r\n\r\n            <MuiThemeProvider theme={theme} >\r\n                <div className={this.props.classes.grid}>\r\n                    <Grid container spacing={10}  alignItems=\"center\" direction=\"row\" justify=\"space-between\">\r\n                        <Grid item xs={12}>\r\n                            <Typography variant='h4' align=\"center\">Добро пожаловать на учебное портфолио <br/> Паирель Дарины</Typography>\r\n                        </Grid>\r\n                        <Grid item xs={8} className={this.props.classes.gridContent} >\r\n                            <ListOfTasks/>\r\n                        </Grid>\r\n                        <Grid item xs={4} >\r\n                            <Avatar src={darinka} alt=\"Darina\" className={this.props.classes.bigAvatar}/>\r\n                        </Grid>\r\n                        <CssBaseline/>\r\n\r\n                    </Grid>\r\n                </div>\r\n            </MuiThemeProvider>\r\n\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(theme)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'typeface-roboto';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}